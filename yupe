#!/usr/bin/env bash
#==================================================================================
# имя файла скрипта на всякий случай
SCRIPT="$0"
# описание работы скрипнта --help
showHelp() {
    echo "usage: ./yupe [set-env] [check-env] [check-config]"
    echo "              [build] [build-nocache] [create] [install] [update]"
    echo "              [start] [stop] [restart] [ps] [fix-chown] [fix-chmod]"
    echo "              [copy-config]"
    echo ""
    echo "description:"
    echo "    set-env           - set application environment [ dev | prod ]"
    echo "    check-env         - print message with current application environment name"
    echo "    check-config      - check current environment docker-compose configuration files"
    echo "    build             - build docker containers for application"
    echo "    build-nocache     - force build docker containers for application without docker cached images"
    echo "    create            - create Yupe!1.1 application in ./app directory with --no-install key, just create"
    echo "    install           - docker exec -it yupedocker_php_1 composer install"
    echo "    update            - composer update  --lock"
    echo "    migrate           - php yii migrate --interactive=0"
    echo "    start             - start application environment"
    echo "    stop              - stop application environment"
    echo "    restart           - restart application environment"
    echo "    ps                - list of working containers in current environment"
    echo "    fix-chown         - change owner to current user (only on Linux and Mac OS) Windows dont need this"
    echo "    fix-chmod         - change a+rw assets, upload, runtime, config e.t.c."
    echo "    copy-config       - copy yupe config folder"
    echo ""
    echo ""
    echo "Для определения в каком окружении должно работать приложение выполните: ./yupe set-env [ dev | prod ]"
    echo ""
    echo "See ./yupe --help to read about all commands."

}
FOLDER=`printf '%s\n' "${PWD##*/}"`
APP_DIR=./app
COMPOSER_CREATE_APP_PATH=
COMPOSER_APP_PATH=
# Текущее окружение
CURRENT_ENV=
#printf 123456 | md5sum | awk '{print $1}'
#echo $APP_$(printf 123456 | md5sum | awk '{print $1}')

# Определяем где запущен скрипт [Linux | Windows | MacOS]
PLATFORM='unknown'
UNAMESTR=`uname`
if [[ "$UNAMESTR" == 'Linux' ]]; then
   PLATFORM='linux'
elif [[ "$UNAMESTR" == 'MINGW64_NT-10.0' ]]; then
    PLATFORM='windows'
elif [[ "$UNAMESTR" == 'Darwin' ]]; then
   PLATFORM='mac'
fi

case "$PLATFORM" in
windows)
    COMPOSER_CREATE_APP_PATH="/$PWD"
    COMPOSER_APP_PATH="/$PWD/app"
    ;;
*)
    echo ""
    COMPOSER_CREATE_APP_PATH="$PWD"
    COMPOSER_APP_PATH="$PWD/app"
    ;;
esac

# Задаем Новое окружение [ dev | prod ]
NEW_ENV=
if [ ! -z $2 ]; then
    NEW_ENV="$2"
fi

# имя функции для запуска
FUNCTION=
if [ ! -z $1 ]; then
    FUNCTION="$1"
fi

# проверка наличия приложения в папке app
check-dir(){
    if [ ! -d "$APP_DIR" ]; then
        # Control will enter here if $DIRECTORY doesn't exist.
        echo "Please, install your application to ./app folder."
        echo "To create app run command: ./yupe create"
        echo "To install/update app dependency run command: ./yupe [ install | update ]"
        exit 1
    fi
}

#Устанавливает полностью yupe-docker в dev окружении, исправляет проблемму которая возникала из за прав доступа к config/db.php при установке CMS
alive(){
  echo "Setting up new application environment to: dev"
  if [ -f ./docker/env/app_env ]; then
      CURRENT_ENV=`cat ./docker/env/app_env`
      docker-compose -f common.yml -f dev.yml down
  fi
  cp ./docker/env/dev/app_env ./docker/env/app_env
  echo "Success"
  check-env
  create
  install
  check-dir
  docker-compose -f common.yml -f $CURRENT_ENV.yml build
  sudo chmod -R 777 ./docker/source/php/dev/app/protected/config/
  chmod 777 ./docker/source/php/dev/app/protected/config/db.php
  start
}

# проверка наличие файла со значением переменной окружения
check-env(){
    if [ ! -f ./docker/env/app_env ]; then
        echo "missing ./docker/env/app_env file, please create application environment file, use command './yupe set-env [ dev | prod ]'"
        exit 1
    else
        environment
    fi
}
# отображаем на экране в каком окружении работает приложение
environment(){
    CURRENT_ENV=`cat ./docker/env/app_env`
    echo "Current application environment: $CURRENT_ENV"
}
# изменяем окружение в котором будет работать приложение
set-env(){
    echo "Updating application environment..."
    case "$NEW_ENV" in
    dev|prod)
        if [ -f ./docker/env/app_env ]; then
            CURRENT_ENV=`cat ./docker/env/app_env`
            docker-compose -f common.yml -f $CURRENT_ENV.yml down
        fi
        echo "Setting up new application environment to: $NEW_ENV"
        cp ./docker/env/$NEW_ENV/app_env ./docker/env/app_env
        echo "Success"
        check-env
        ;;
    *) #если введено с клавиатуры то, что в case не описывается, выполнять следующее:
        echo "ERROR: Вторым параметром команды укажите в каком окружении необходимо запускать приложение dev, prod"
        exit 1;
    esac
}

build-nocache(){
    check-dir
    echo "Building docker images for $CURRENT_ENV environment without cache."
    docker-compose -f common.yml -f $CURRENT_ENV.yml build --no-cache
}

build(){
    check-dir
    echo "Building docker images for $CURRENT_ENV environment with cache."
    docker-compose -f common.yml -f $CURRENT_ENV.yml build
}
ps(){
    echo "Container status in $CURRENT_ENV environment:"
    docker-compose -f common.yml -f $CURRENT_ENV.yml ps
}

start(){
    check-dir
    echo "Start Yupe! in $CURRENT_ENV environment"
    docker-compose -f common.yml -f $CURRENT_ENV.yml up -d
    ps
    echo ''
}
stop(){
    check-dir
    echo "Stop Yupe! in $CURRENT_ENV environment"
    docker-compose -f common.yml -f $CURRENT_ENV.yml down
    ps
    echo ''
}
restart(){
    check-dir
    echo "Restart Yupe! in $CURRENT_ENV environment"
    docker-compose -f common.yml -f $CURRENT_ENV.yml down
    docker-compose -f common.yml -f $CURRENT_ENV.yml up -d
    ps
    echo ''
}

check-config(){
    echo "Config status in $CURRENT_ENV environment:"
    docker-compose -f common.yml -f $CURRENT_ENV.yml config
}



create(){
    if [ ! -d "$APP_DIR" ]; then
        echo "Creating Yupe! 1.1 in ./app/yupe folder and copy config files to ./docker/source/php/[dev && prod]/app/protected/"
        echo "Running: docker run --rm --interactive --tty --volume "$COMPOSER_CREATE_APP_PATH/app:/app:rw" composer create-project yupe/yupe:1.1 yupe --no-install"
        docker run --rm --interactive --tty --volume "$COMPOSER_CREATE_APP_PATH/app:/app:rw" --name "yupe-composer" composer create-project yupe/yupe:1.1 yupe --no-install --no-interaction
        install
        copy-config
        fix-chown
        fix-chmod
        rm ./docker/source/php/dev/app/protected/config/.gitignore
        rm ./docker/source/php/prod/app/protected/config/.gitignore
        rm ./docker/source/php/dev/app/protected/config/modules/.gitignore
        rm ./docker/source/php/prod/app/protected/config/modules/.gitignore
    else
        echo "Error: Can not create application yupe/yupe:1.1 in app dirrectory, it's already in app directory, app dirrectory is not empty. Please, remove app directory to create new app."
    fi
}

install(){
    if [ -d "$APP_DIR" ]; then
        echo "Running: composer install"
        docker run --rm --interactive --tty --volume "$COMPOSER_APP_PATH/yupe:/app:rw" --name "yupe-composer" composer install --no-interaction
    else
        create
    fi
}

update(){
    if [ -d "$APP_DIR" ]; then
        echo "Running: composer update --lock"
        docker run --rm --interactive --tty --volume "$COMPOSER_APP_PATH/yupe:/app:rw" --name "yupe-composer"  composer update --lock --no-interaction
    else
        echo "Error: can't update, no app folder. Please, create app, run: ./yupe create"
    fi
}
#db-backup(){
#    echo "Backup DB to Amazon S3 cloud"
#    docker run --rm --env-file ./docker/env/s3.env --env-file ./docker/env/db-backup.env --volumes-from yupedocker_db_1 --name dockup tutum/dockup:latest
#}
#db-restore(){
#    echo "Restore DB from Amazon S3 cloud"
#    docker run --rm --env-file ./docker/env/s3.env --env-file ./docker/env/db-restore.env --volumes-from yupedocker_db_1 --name dockup tutum/dockup:latest
#}
#elf-destroy(){
#    echo "Yupe self destroy program activated. Good By all Files and Data! Hello New World!"
#    check-env
#    stop
#    rm ./app -rf
#    rm ./docker/source/php/dev/app/protected/config -rf
#    rm ./docker/source/php/prod/app/protected/config -rf
#    rm ./docker/env/app_env -f
#    rm ./docker/env/dev/XDEBUG_CONFIG.env -f
#    echo "There is no Yupe in this project."
#}

#init(){
#    echo "Init Yupe application in Development or Production environment"
#    echo "Running: docker exec -it living_php_1 php init"
#    docker exec -it living_php_1 php init
#    chown
#    chmod
#}

migrate(){
    echo "Apply application DB migrations"
    echo "Running: docker exec -it yupedocker_php_1 php yii migrate --interactive=0"
    docker exec -it yupedocker_php_1 php yii migrate --interactive=0
}

fix-chown(){
    case "$PLATFORM" in
    windows)
        ;;
    linux|mac)
        echo "Changing owner application files"
        sudo chown $USER:$USER -R ./app/yupe
        #sudo find . -type d -user root -exec chown $USER {} \;
        #sudo find ! -name ./.git/ ./.gitignore -user root -exec chown $USER {} \;
        #sudo find . -type f -user root -exec chown $USER {} \;
        ;;
    esac
}

fix-chmod(){
    case "$PLATFORM" in
    windows)
        ;;
    linux|mac)
        echo "Changing chmod application files"
        chmod a+rw ./app/yupe/public/assets ./app/yupe/public/uploads ./app/yupe/protected/runtime -R
        chmod a+rw ./docker/source/php/prod/app/protected/config/modules ./docker/source/php/prod/app/protected/config/modulesBack
        chmod a+rw ./docker/source/php/dev/app/protected/config/modules ./docker/source/php/dev/app/protected/config/modulesBack
        #тут исправление проблеммы, которая возникала при попытке установить CMS Yupe из за нехватки прав на запись
        sudo chmod -R 777 ./docker/source/php/dev/app/protected/config/
        sudo chmod -R 777 ./docker/source/php/prod/app/protected/config/
        chmod 777 ./docker/source/php/dev/app/protected/config/db.php
        ;;
    esac
}
prepare-config-folder(){
    case "$PLATFORM" in
    windows)
        ;;
    linux|mac)
        echo "Changing chmod application files: ./docker/source/php/dev/app/ ./docker/source/php/prod/app/"
        chmod a+rw ./docker/source/php/dev/app/ -R
        chmod a+rw ./docker/source/php/prod/app/ -R
        ;;
    esac

}
copy-config(){
    prepare-config-folder
    cp ./app/yupe/protected/config/ ./docker/source/php/dev/app/protected/ -R
    cp ./app/yupe/protected/config/ ./docker/source/php/prod/app/protected/ -R
}
init-xdebug(){
    if [ ! -f ./docker/env/dev/XDEBUG_CONFIG.env ]; then
        touch ./docker/env/dev/XDEBUG_CONFIG.env
        case "$PLATFORM" in
        windows)
            echo "XDEBUG_CONFIG=remote_host=10.0.75.1" >> ./docker/env/dev/XDEBUG_CONFIG.env
            ;;
        *)
            echo "XDEBUG_CONFIG=remote_host=172.17.0.1" >> ./docker/env/dev/XDEBUG_CONFIG.env
            ;;
        esac
    fi
}
#echo "/$PWD"
#exit 0
case "$1" in
-h|--help)
    showHelp
    ;;
check-env|environment)
    check-env
    ;;
set-env)
    set-env
    ;;
self-destroy)
    self-destroy
    ;;
*)
    if [ ! -z $(type -t $FUNCTION | grep function) ]; then
        init-xdebug
        check-env
        $1
    else
        showHelp
    fi
esac
